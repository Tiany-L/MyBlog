(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{278:function(t,a,s){"use strict";s.r(a);var n=s(10),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[t._v("#")]),t._v(" api")]),t._v(" "),a("h2",{attrs:{id:"valueof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#valueof"}},[t._v("#")]),t._v(" valueOf()")]),t._v(" "),a("ul",[a("li",[t._v("方法是一个用于获取 JavaScript 对象的原始值的通用方法。")]),t._v(" "),a("li",[t._v("原始值类型有\n"),a("ul",[a("li",[t._v("undefined：表示未定义的值。")]),t._v(" "),a("li",[t._v("null：表示空值。")]),t._v(" "),a("li",[t._v("boolean：表示布尔值 true 或 false。")]),t._v(" "),a("li",[t._v("number：表示数字，包括整数和浮点数。")]),t._v(" "),a("li",[t._v("string：表示字符串。")]),t._v(" "),a("li",[t._v("symbol：表示唯一的符号值。")]),t._v(" "),a("li",[t._v("bigint：表示任意精度的整数")])])]),t._v(" "),a("li",[t._v("如果在进行比较运算的时候 valueOf 返回的不是原始类型，将进行 toString 的转换")])]),t._v(" "),a("h2",{attrs:{id:"tostring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tostring"}},[t._v("#")]),t._v(" toString()")]),t._v(" "),a("ul",[a("li",[t._v("返回一个表示该对象的字符串")]),t._v(" "),a("li",[t._v("toString 是 Number String Function 这些构造函数重写了 Object 原型上的 toSting 目的是为了转换字符串类型")]),t._v(" "),a("li",[t._v("万物皆可 toString 此刻两个知识点 到底调用的是哪个 toString")]),t._v(" "),a("li",[t._v("构造函数的 toString 返回当前值的字符串形式")]),t._v(" "),a("li",[t._v("Object.prototype.toString.call() 获取当前的数据类型 用于对象类型的判断")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 直接返回调用者的类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[object number]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 内部会进行this的类型检测 根据this的类型 决定返回什么样的结果")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[object object]")]),t._v("\ntoString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n")])])]),a("h2",{attrs:{id:"运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[t._v("#")]),t._v(" 运算符")]),t._v(" "),a("ul",[a("li",[t._v("==\n"),a("ul",[a("li",[t._v("对象和字符串比较 会将对象进行类型转换")]),t._v(" "),a("li",[t._v("字符串和整数比较 会将整串转换为字符串进行比较")])])]),t._v(" "),a("li",[t._v("===\n"),a("ul",[a("li",[t._v("不会进行类型转换 比较的是值和类型")])])])])])}),[],!1,null,null,null);a.default=e.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{318:function(t,v,_){"use strict";_.r(v);var e=_(10),a=Object(e.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"computed-和-watch-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#computed-和-watch-的区别"}},[t._v("#")]),t._v(" computed 和 watch 的区别")]),t._v(" "),v("h2",{attrs:{id:"计算属性computed"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#计算属性computed"}},[t._v("#")]),t._v(" 计算属性computed")]),t._v(" "),v("p",[t._v("1、"),v("strong",[t._v("支持缓存")]),t._v("，只有依赖数据发生改变，才会重新进行计算。")]),t._v(" "),v("p",[t._v("2、"),v("strong",[t._v("不支持异步")]),t._v("，当computed内有异步操作时无效，无法监听数据的变化。")]),t._v(" "),v("p",[t._v("3、computed 属性值会默认走缓存，计算属性是基于它们的响应式依赖进行缓存的，也就是基于data中声明过或者父组件传递的props中的数据通过计算得到的值。")]),t._v(" "),v("p",[t._v("4、如果一个属性是由其他属性计算而来的，这个属性依赖其他属性，是一个多对一或者一对一，一般用computed。")]),t._v(" "),v("p",[t._v("5、如果computed属性属性值是函数，那么默认会走get方法；函数的返回值就是属性的属性值；在computed中的，属性都有一个get和一个set方法，当数据变化时，调用set方法。")]),t._v(" "),v("h2",{attrs:{id:"侦听属性watch"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#侦听属性watch"}},[t._v("#")]),t._v(" 侦听属性watch")]),t._v(" "),v("p",[t._v("1、"),v("strong",[t._v("不支持缓存")]),t._v("，数据变，直接会触发相应的操作；")]),t._v(" "),v("p",[t._v("2、watch"),v("strong",[t._v("支持异步")]),t._v("；")]),t._v(" "),v("p",[t._v("3、监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值。")]),t._v(" "),v("p",[t._v("4、当一个属性发生变化时，需要执行对应的操作；一对多。")]),t._v(" "),v("p",[t._v("5、监听数据必须是data中声明过或者父组件传递过来的props中的数据，当数据变化时，触发其他操作，函数有两个参数。")]),t._v(" "),v("p",[v("strong",[v("code",[t._v("immediate")])]),t._v("：组件加载立即触发回调函数执行。")]),t._v(" "),v("p",[v("strong",[v("code",[t._v("deep")])]),t._v(": 深度监听，为了发现"),v("strong",[t._v("对象内部值")]),t._v("的变化，复杂类型的数据时使用，例如数组中的对象内容的改变，注意监听数组的变动不需要这么做。注意：deep无法监听到数组的变动和对象的新增，参考vue数组变异,只有以响应式的方式触发才会被监听到。")])])}),[],!1,null,null,null);v.default=a.exports}}]);